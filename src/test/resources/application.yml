datasource:
  driver: org.postgresql.Driver
  jdbcUrl: ${POSTGRES_URL}
  username: ${POSTGRES_USERNAME}
  password: ${POSTGRES_PASSWORD}
spring:
  main:
    keep-alive: true
  application:
    name: emblemata
  datasource:
    driver-class-name: ${datasource.driver}
    username: ${datasource.username}
    url: ${datasource.jdbcUrl}
    password: ${datasource.password}
  jpa:
    hibernate:
      generate-ddl: true
      ddl-auto: update
  flyway:
    baseline-on-migrate: true
    baseline-version: '0'

  kafka:
    enabled: false
    security:
      protocol: PLAINTEXT
    admin:
      fail-fast: true
    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_BROKER}
      acks: ${ACKS:all}
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      #      transaction-id-prefix: kproducer-${random.int(1000)}-tx-
      properties:
        retries: 0
        enable.idempotence: false
        delivery.timeout.ms: 1000
        request.timeout.ms: 1000
        max.in.flight.requests.per.connection: 1

    # application specific kafka related configuration
    constituency-topic: emblemata-constituency
    initial-attempt: true   # if true a first best effort attempt is made to send the message to kafka after storing it in the outbox

    # the outbox pattern is used to store messages in the database before sending them to kafka
    outbox:
      scheduler:
        enabled: false
        delayms: '#{60*1000}' #60 seconds # the interval at which the scheduler runs, expressed in milliseconds
        max-attempts: 3 # count of retry attempts for sending a message to kafka, not including the first best effort attempt
        backoff-base: 5 # base in minutes for the exponential backoff. Example: if backoff base is 5, the 1st retry attempt
                        # will be made after 5 minutes, the 2nd after 25 minutes, the 3rd after 125 minutes, etc.
        statistics:
          log: true
          log-level: INFO
          log-interval-minutes: 60 # print statistics every 60 minutes



logging:
  level:
    root: WARN
    it.gov.acn: DEBUG
    #org.springframework.kafka.core.KafkaTemplate: TRACE
    #org.apache.kafka: DEBUG
    #org.hibernate.engine.transaction.internal.TransactionImpl: TRACE